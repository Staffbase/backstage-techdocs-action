name: 'Backstage TechDocs'
description: 'Generate and publish Backstage TechDocs.'
author: 'Staffbase GmbH'

inputs:
  entity-namespace:
    description: 'Entity Namespace'
    required: true
    default: 'default'
  entity-kind:
    description: 'Entity Kind'
    required: true
    default: 'Component'
  entity-name:
    description: 'Entity Name'
    required: true
  publisher-type:
    description: 'awsS3 | azureBlobStorage'
    required: false
  storage-name:
    description: 'In case of AWS/GCS, use the bucket name. In case of Azure, use container name.'
    required: false
  aws-region:
    description: 'AWS Region'
    required: false
    default: 'eu-central-1'
  aws-access-key-id:
    description: 'AWS Access Key ID'
    required: false
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: false
  azure-account-name:
    description: 'Azure Account Name'
    required: false
  azure-account-key:
    description: 'Azure Account Name'
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup Node
      uses: actions/setup-node@v3.4.1

    - name: Setup Python
      uses: actions/setup-python@v4

    - name: Install techdocs-cli
      shell: bash
      run: sudo npm install -g @techdocs/cli

    - name: Install mkdocs and mkdocs plugins
      shell: bash
      run: python -m pip install mkdocs-techdocs-core==0.*

    - name: Generate docs site
      shell: bash
      run: techdocs-cli generate --no-docker --verbose

    - name: Publish TechDocs site to AWS S3
      if: inputs.publisher-type == 'awsS3'
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        techdocs-cli publish --publisher-type ${{ inputs.publisher-type }} \
        --storage-name ${{ inputs.storage-name }} \
        --entity ${{ inputs.entity-namespace }}/${{ inputs.entity-kind }}/${{ inputs.entity-name }}

    - name: Publish TechDocs site to Azure Blob
      if: inputs.publisher-type == 'azureBlobStorage'
      shell: bash
      run: |
        techdocs-cli publish --publisher-type ${{ inputs.publisher-type }} \
        --storage-name ${{ inputs.storage-name }} \
        --entity ${{ inputs.entity-namespace }}/${{ inputs.entity-kind }}/${{ inputs.entity-name }} \
        --azureAccountName ${{ inputs.azure-account-name }} \
        --azureAccountKey ${{ inputs.azure-account-key }}

branding:
  icon: 'check-square'
  color: 'blue'
